// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: tns.proto
#ifndef GRPC_tns_2eproto__INCLUDED
#define GRPC_tns_2eproto__INCLUDED

#include "tns.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace tns {

// The greeting service definition.
class Test final {
 public:
  static constexpr char const* service_full_name() {
    return "tns.Test";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Sends greetings
    virtual ::grpc::Status SayHello(::grpc::ClientContext* context, const ::tns::TestRequest& request, ::tns::TestReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tns::TestReply>> AsyncSayHello(::grpc::ClientContext* context, const ::tns::TestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tns::TestReply>>(AsyncSayHelloRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tns::TestReply>> PrepareAsyncSayHello(::grpc::ClientContext* context, const ::tns::TestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tns::TestReply>>(PrepareAsyncSayHelloRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tns::TestReply>* AsyncSayHelloRaw(::grpc::ClientContext* context, const ::tns::TestRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tns::TestReply>* PrepareAsyncSayHelloRaw(::grpc::ClientContext* context, const ::tns::TestRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status SayHello(::grpc::ClientContext* context, const ::tns::TestRequest& request, ::tns::TestReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tns::TestReply>> AsyncSayHello(::grpc::ClientContext* context, const ::tns::TestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tns::TestReply>>(AsyncSayHelloRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tns::TestReply>> PrepareAsyncSayHello(::grpc::ClientContext* context, const ::tns::TestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tns::TestReply>>(PrepareAsyncSayHelloRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::tns::TestReply>* AsyncSayHelloRaw(::grpc::ClientContext* context, const ::tns::TestRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tns::TestReply>* PrepareAsyncSayHelloRaw(::grpc::ClientContext* context, const ::tns::TestRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SayHello_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Sends greetings
    virtual ::grpc::Status SayHello(::grpc::ServerContext* context, const ::tns::TestRequest* request, ::tns::TestReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SayHello() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* context, const ::tns::TestRequest* request, ::tns::TestReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSayHello(::grpc::ServerContext* context, ::tns::TestRequest* request, ::grpc::ServerAsyncResponseWriter< ::tns::TestReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SayHello<Service > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SayHello() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* context, const ::tns::TestRequest* request, ::tns::TestReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SayHello() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::tns::TestRequest, ::tns::TestReply>(std::bind(&WithStreamedUnaryMethod_SayHello<BaseClass>::StreamedSayHello, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* context, const ::tns::TestRequest* request, ::tns::TestReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSayHello(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tns::TestRequest,::tns::TestReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SayHello<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SayHello<Service > StreamedService;
};

// The LIST service definition
class tinyNetworkingService final {
 public:
  static constexpr char const* service_full_name() {
    return "tns.tinyNetworkingService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Send all users/following users
    virtual ::grpc::Status List(::grpc::ClientContext* context, const ::tns::ListRequest& request, ::tns::ListReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tns::ListReply>> AsyncList(::grpc::ClientContext* context, const ::tns::ListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tns::ListReply>>(AsyncListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tns::ListReply>> PrepareAsyncList(::grpc::ClientContext* context, const ::tns::ListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tns::ListReply>>(PrepareAsyncListRaw(context, request, cq));
    }
    virtual ::grpc::Status Follow(::grpc::ClientContext* context, const ::tns::FollowRequest& request, ::tns::FollowReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tns::FollowReply>> AsyncFollow(::grpc::ClientContext* context, const ::tns::FollowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tns::FollowReply>>(AsyncFollowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tns::FollowReply>> PrepareAsyncFollow(::grpc::ClientContext* context, const ::tns::FollowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tns::FollowReply>>(PrepareAsyncFollowRaw(context, request, cq));
    }
    virtual ::grpc::Status Unfollow(::grpc::ClientContext* context, const ::tns::FollowRequest& request, ::tns::FollowReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tns::FollowReply>> AsyncUnfollow(::grpc::ClientContext* context, const ::tns::FollowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tns::FollowReply>>(AsyncUnfollowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tns::FollowReply>> PrepareAsyncUnfollow(::grpc::ClientContext* context, const ::tns::FollowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tns::FollowReply>>(PrepareAsyncUnfollowRaw(context, request, cq));
    }
    virtual ::grpc::Status Update(::grpc::ClientContext* context, const ::tns::UpdateRequest& request, ::tns::UpdateReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tns::UpdateReply>> AsyncUpdate(::grpc::ClientContext* context, const ::tns::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tns::UpdateReply>>(AsyncUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tns::UpdateReply>> PrepareAsyncUpdate(::grpc::ClientContext* context, const ::tns::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tns::UpdateReply>>(PrepareAsyncUpdateRaw(context, request, cq));
    }
    virtual ::grpc::Status Post(::grpc::ClientContext* context, const ::tns::PostRequest& request, ::tns::PostReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tns::PostReply>> AsyncPost(::grpc::ClientContext* context, const ::tns::PostRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tns::PostReply>>(AsyncPostRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tns::PostReply>> PrepareAsyncPost(::grpc::ClientContext* context, const ::tns::PostRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tns::PostReply>>(PrepareAsyncPostRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tns::ListReply>* AsyncListRaw(::grpc::ClientContext* context, const ::tns::ListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tns::ListReply>* PrepareAsyncListRaw(::grpc::ClientContext* context, const ::tns::ListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tns::FollowReply>* AsyncFollowRaw(::grpc::ClientContext* context, const ::tns::FollowRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tns::FollowReply>* PrepareAsyncFollowRaw(::grpc::ClientContext* context, const ::tns::FollowRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tns::FollowReply>* AsyncUnfollowRaw(::grpc::ClientContext* context, const ::tns::FollowRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tns::FollowReply>* PrepareAsyncUnfollowRaw(::grpc::ClientContext* context, const ::tns::FollowRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tns::UpdateReply>* AsyncUpdateRaw(::grpc::ClientContext* context, const ::tns::UpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tns::UpdateReply>* PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::tns::UpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tns::PostReply>* AsyncPostRaw(::grpc::ClientContext* context, const ::tns::PostRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tns::PostReply>* PrepareAsyncPostRaw(::grpc::ClientContext* context, const ::tns::PostRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status List(::grpc::ClientContext* context, const ::tns::ListRequest& request, ::tns::ListReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tns::ListReply>> AsyncList(::grpc::ClientContext* context, const ::tns::ListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tns::ListReply>>(AsyncListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tns::ListReply>> PrepareAsyncList(::grpc::ClientContext* context, const ::tns::ListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tns::ListReply>>(PrepareAsyncListRaw(context, request, cq));
    }
    ::grpc::Status Follow(::grpc::ClientContext* context, const ::tns::FollowRequest& request, ::tns::FollowReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tns::FollowReply>> AsyncFollow(::grpc::ClientContext* context, const ::tns::FollowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tns::FollowReply>>(AsyncFollowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tns::FollowReply>> PrepareAsyncFollow(::grpc::ClientContext* context, const ::tns::FollowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tns::FollowReply>>(PrepareAsyncFollowRaw(context, request, cq));
    }
    ::grpc::Status Unfollow(::grpc::ClientContext* context, const ::tns::FollowRequest& request, ::tns::FollowReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tns::FollowReply>> AsyncUnfollow(::grpc::ClientContext* context, const ::tns::FollowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tns::FollowReply>>(AsyncUnfollowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tns::FollowReply>> PrepareAsyncUnfollow(::grpc::ClientContext* context, const ::tns::FollowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tns::FollowReply>>(PrepareAsyncUnfollowRaw(context, request, cq));
    }
    ::grpc::Status Update(::grpc::ClientContext* context, const ::tns::UpdateRequest& request, ::tns::UpdateReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tns::UpdateReply>> AsyncUpdate(::grpc::ClientContext* context, const ::tns::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tns::UpdateReply>>(AsyncUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tns::UpdateReply>> PrepareAsyncUpdate(::grpc::ClientContext* context, const ::tns::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tns::UpdateReply>>(PrepareAsyncUpdateRaw(context, request, cq));
    }
    ::grpc::Status Post(::grpc::ClientContext* context, const ::tns::PostRequest& request, ::tns::PostReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tns::PostReply>> AsyncPost(::grpc::ClientContext* context, const ::tns::PostRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tns::PostReply>>(AsyncPostRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tns::PostReply>> PrepareAsyncPost(::grpc::ClientContext* context, const ::tns::PostRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tns::PostReply>>(PrepareAsyncPostRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::tns::ListReply>* AsyncListRaw(::grpc::ClientContext* context, const ::tns::ListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tns::ListReply>* PrepareAsyncListRaw(::grpc::ClientContext* context, const ::tns::ListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tns::FollowReply>* AsyncFollowRaw(::grpc::ClientContext* context, const ::tns::FollowRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tns::FollowReply>* PrepareAsyncFollowRaw(::grpc::ClientContext* context, const ::tns::FollowRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tns::FollowReply>* AsyncUnfollowRaw(::grpc::ClientContext* context, const ::tns::FollowRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tns::FollowReply>* PrepareAsyncUnfollowRaw(::grpc::ClientContext* context, const ::tns::FollowRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tns::UpdateReply>* AsyncUpdateRaw(::grpc::ClientContext* context, const ::tns::UpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tns::UpdateReply>* PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::tns::UpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tns::PostReply>* AsyncPostRaw(::grpc::ClientContext* context, const ::tns::PostRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tns::PostReply>* PrepareAsyncPostRaw(::grpc::ClientContext* context, const ::tns::PostRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_List_;
    const ::grpc::internal::RpcMethod rpcmethod_Follow_;
    const ::grpc::internal::RpcMethod rpcmethod_Unfollow_;
    const ::grpc::internal::RpcMethod rpcmethod_Update_;
    const ::grpc::internal::RpcMethod rpcmethod_Post_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Send all users/following users
    virtual ::grpc::Status List(::grpc::ServerContext* context, const ::tns::ListRequest* request, ::tns::ListReply* response);
    virtual ::grpc::Status Follow(::grpc::ServerContext* context, const ::tns::FollowRequest* request, ::tns::FollowReply* response);
    virtual ::grpc::Status Unfollow(::grpc::ServerContext* context, const ::tns::FollowRequest* request, ::tns::FollowReply* response);
    virtual ::grpc::Status Update(::grpc::ServerContext* context, const ::tns::UpdateRequest* request, ::tns::UpdateReply* response);
    virtual ::grpc::Status Post(::grpc::ServerContext* context, const ::tns::PostRequest* request, ::tns::PostReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_List() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* context, const ::tns::ListRequest* request, ::tns::ListReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestList(::grpc::ServerContext* context, ::tns::ListRequest* request, ::grpc::ServerAsyncResponseWriter< ::tns::ListReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Follow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Follow() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Follow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Follow(::grpc::ServerContext* context, const ::tns::FollowRequest* request, ::tns::FollowReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFollow(::grpc::ServerContext* context, ::tns::FollowRequest* request, ::grpc::ServerAsyncResponseWriter< ::tns::FollowReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Unfollow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Unfollow() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Unfollow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Unfollow(::grpc::ServerContext* context, const ::tns::FollowRequest* request, ::tns::FollowReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnfollow(::grpc::ServerContext* context, ::tns::FollowRequest* request, ::grpc::ServerAsyncResponseWriter< ::tns::FollowReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Update() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* context, const ::tns::UpdateRequest* request, ::tns::UpdateReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdate(::grpc::ServerContext* context, ::tns::UpdateRequest* request, ::grpc::ServerAsyncResponseWriter< ::tns::UpdateReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Post : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Post() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_Post() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Post(::grpc::ServerContext* context, const ::tns::PostRequest* request, ::tns::PostReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPost(::grpc::ServerContext* context, ::tns::PostRequest* request, ::grpc::ServerAsyncResponseWriter< ::tns::PostReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_List<WithAsyncMethod_Follow<WithAsyncMethod_Unfollow<WithAsyncMethod_Update<WithAsyncMethod_Post<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_List() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* context, const ::tns::ListRequest* request, ::tns::ListReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Follow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Follow() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Follow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Follow(::grpc::ServerContext* context, const ::tns::FollowRequest* request, ::tns::FollowReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Unfollow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Unfollow() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Unfollow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Unfollow(::grpc::ServerContext* context, const ::tns::FollowRequest* request, ::tns::FollowReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Update() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* context, const ::tns::UpdateRequest* request, ::tns::UpdateReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Post : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Post() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_Post() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Post(::grpc::ServerContext* context, const ::tns::PostRequest* request, ::tns::PostReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_List() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::tns::ListRequest, ::tns::ListReply>(std::bind(&WithStreamedUnaryMethod_List<BaseClass>::StreamedList, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status List(::grpc::ServerContext* context, const ::tns::ListRequest* request, ::tns::ListReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedList(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tns::ListRequest,::tns::ListReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Follow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Follow() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::tns::FollowRequest, ::tns::FollowReply>(std::bind(&WithStreamedUnaryMethod_Follow<BaseClass>::StreamedFollow, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Follow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Follow(::grpc::ServerContext* context, const ::tns::FollowRequest* request, ::tns::FollowReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFollow(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tns::FollowRequest,::tns::FollowReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Unfollow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Unfollow() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::tns::FollowRequest, ::tns::FollowReply>(std::bind(&WithStreamedUnaryMethod_Unfollow<BaseClass>::StreamedUnfollow, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Unfollow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Unfollow(::grpc::ServerContext* context, const ::tns::FollowRequest* request, ::tns::FollowReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUnfollow(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tns::FollowRequest,::tns::FollowReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Update() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::tns::UpdateRequest, ::tns::UpdateReply>(std::bind(&WithStreamedUnaryMethod_Update<BaseClass>::StreamedUpdate, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Update(::grpc::ServerContext* context, const ::tns::UpdateRequest* request, ::tns::UpdateReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tns::UpdateRequest,::tns::UpdateReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Post : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Post() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::tns::PostRequest, ::tns::PostReply>(std::bind(&WithStreamedUnaryMethod_Post<BaseClass>::StreamedPost, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Post() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Post(::grpc::ServerContext* context, const ::tns::PostRequest* request, ::tns::PostReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPost(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tns::PostRequest,::tns::PostReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_List<WithStreamedUnaryMethod_Follow<WithStreamedUnaryMethod_Unfollow<WithStreamedUnaryMethod_Update<WithStreamedUnaryMethod_Post<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_List<WithStreamedUnaryMethod_Follow<WithStreamedUnaryMethod_Unfollow<WithStreamedUnaryMethod_Update<WithStreamedUnaryMethod_Post<Service > > > > > StreamedService;
};

}  // namespace tns


#endif  // GRPC_tns_2eproto__INCLUDED
